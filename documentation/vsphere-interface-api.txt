@startuml


package "Core Application" {
    object main {
        + main()
    }

    object parser {
        + check_syntax()
        + parse_file()
        + verify_syntax()
    }

    object utils {
        + setup_logging()
        + time_execution()
        + make_vsphere()
        + script_setup()
    }

    main -> parser
}

package "Scripts" {
    object clone_vms {
        + main()
    }

    object cleanup_vms {
        + main()
    }

    object vm_power {
        + main()
    }

    object vsphere_info {
        + main()
    }
}


package "Platform Interfaces" {

    interface Interface {
        + create_masters()
        + deploy_environment()
        + cleanup_masters()
        + cleanup_environment()
    }

    class Group {
        + name
        + size
        + users
        + group_type
        + get_ad_groups()
    }
    Interface -- Group

    package "VMware vSphere" {

        class VsphereInterface {
            + create_masters()
            + cleanup_masters()
            + deploy_environment()
            + cleanup_environment()
            + server
            + spec
            + infra
            + groups
            + hosts
            - _log
        }

        class Vsphere {
            + create_folder()
            + set_motd()
            + map_items()
            .. Permissions ..
            + set_entity_permissions()
            + get_entity_permissions()
            + get_role_permissions()
            + get_users()
            .. Getters ..
            + get_info()
            + get_folder()
            + get_vm()
            + get_network()
            + get_host()
            + get_cluster()
            + get_datastore()
            + get_pool()
            + get_all_vms()
            + get_obj()
            + get_objs()
            + get_item()
            .. Finders ..
            + find_by_uuid()
            + find_by_ds_path()
            + find_by_ip()
            + find_by_hostname()
            + find_by_inv_path()
            __ public __
            + server
            + datacenter
            + datastore
            + content
            + auth
            + user_dir
            + username
            + hostname
            + port
            __ private __
            - _server
            - _log
        }

        class VM {
            + create()
            + destroy()
            + change_state()
            .. Edit operations ..
            + edit_resources()
            + rename()
            + upgrade()
            + convert_template()
            + convert_vm()
            + set_note()
            .. Snapshots ..
            + snapshot_disk_usage()
            + create_snapshot()
            + revert_to_snapshot()
            + revert_to_current_snapshot()
            + remove_snapshot()
            + remove_all_snapshots()
            .. Device operations ..
            + add_nic()
            + edit_nic()
            + remove_nic()
            + remove_device()
            + attach_iso()
            + mount_tools()
            .. Getters ..
            + get_nics()
            + get_nic_by_name()
            + get_nic_by_id()
            + get_nic_by_network()
            + get_snapshot()
            + get_all_snapshots()
            + get_vim_vm()
            + get_datastore_folder()
            .. Query status/info ..
            + get_info()
            + screenshot()
            + has_tools()
            + powered_on()
            + is_template()
            + is_windows()
            __ public __
            + name
            + folder
            + resource_pool
            + datastore
            + host
            + vm_folder
            __ private __
            - _vm
            - _log
        }
        
        class Host {
            + create_vswitch()
            + create_portgroup()
            + delete_network()
            .. Getters ..
            + get_info()
            + get_net_item()
            + get_net_obj()
            + get_net_objs()
            __ public __
            + host
            + name
            + config
        }
        
        object pyVmomi {
            + vim
            + vmodl
        }

        Interface -- VsphereInterface

        VsphereInterface -- Vsphere
        VsphereInterface --* VM
        VsphereInterface --* Host
        Vsphere - pyVmomi
    }
}

main -> Interface
main -- utils

clone_vms - utils
clone_vms --* Vsphere

cleanup_vms - utils
cleanup_vms --* Vsphere

vm_power - utils
vm_power --* Vsphere

vsphere_info - utils
vsphere_info --* Vsphere


@enduml